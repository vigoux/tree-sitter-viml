================================================================================
Call expression
================================================================================

call function(ab, bc, cd)

--------------------------------------------------------------------------------

(script_file
  (call_statement
    (call_expression
      (identifier)
      (identifier)
      (identifier)
      (identifier))))

================================================================================
Call expression with curly-braces
================================================================================

call function_{name}(ab, bc, cd)

--------------------------------------------------------------------------------

(script_file
  (call_statement
    (call_expression
      (identifier
        (identifier))
      (identifier)
      (identifier)
      (identifier))))

================================================================================
String arguments
================================================================================

call foo('abc', 'efg')

--------------------------------------------------------------------------------

(script_file
  (call_statement
    (call_expression
      (identifier)
      (string_literal)
      (string_literal))))

================================================================================
Or expression
================================================================================

let foo = bar || baz

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (identifier)
    (binary_operation
      (identifier)
      (identifier))))

================================================================================
Scope dict
================================================================================

let foo = get(g:, "bar")

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (identifier)
    (call_expression
      (identifier)
      (scope_dict)
      (string_literal))))

================================================================================
Literal string
================================================================================

let foo = 'hello ''you'''

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (identifier)
    (string_literal)))

================================================================================
Multiline string #31
================================================================================

let var = '
\ long multiline string
\ "with nested quotes" '
let var = "
\ long multiline string
\ 'with nested quotes' "

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (identifier)
    (string_literal))
  (let_statement
    (identifier)
    (string_literal)))

================================================================================
Slice expression
================================================================================

let l = mylist[:3]
let l = mylist[4:4]
let l = mylist[:]

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (identifier)
    (slice_expression
      (identifier)
      (integer_literal)))
  (let_statement
    (identifier)
    (slice_expression
      (identifier)
      (integer_literal)
      (integer_literal)))
  (let_statement
    (identifier)
    (slice_expression
      (identifier))))

================================================================================
String concatenation
================================================================================

let a = "abc" .. "def"
let a = "abc" . "def"

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (identifier)
    (binary_operation
      (string_literal)
      (string_literal)))
  (let_statement
    (identifier)
    (binary_operation
      (string_literal)
      (string_literal))))

================================================================================
Dictionnary keys
================================================================================

let d.bar = 30
let a = d.bar

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (field_expression
      (identifier)
      (identifier))
    (integer_literal))
  (let_statement
    (identifier)
    (field_expression
      (identifier)
      (identifier))))

================================================================================
Lists
================================================================================

let list = ['a', 'b']
let list = ['a', 'b',]
let list = [
  \ 'a',
  \ 'b'
  \]

let list = [
  \ 'a',
  \ 'b',
  \]

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (identifier)
    (list
      (string_literal)
      (string_literal)))
  (let_statement
    (identifier)
    (list
      (string_literal)
      (string_literal)))
  (let_statement
    (identifier)
    (list
      (string_literal)
      (string_literal)))
  (let_statement
    (identifier)
    (list
      (string_literal)
      (string_literal))))

================================================================================
Registers
================================================================================

let @a = "some text"
let current_line = @.
let unamed_register = @@
let other_unamed_register = @@

--------------------------------------------------------------------------------

(script_file
  (let_statement
    (register)
    (string_literal))
  (let_statement
    (identifier)
    (register))
  (let_statement
    (identifier)
    (register))
  (let_statement
    (identifier)
    (register)))
